const urlParams = new URLSearchParams(window.location.search);
const movieId = urlParams.get("id");



if (!movieId) {
    document.getElementById("title").textContent = "ID —Ñ–∏–ª—å–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ URL";
} else {
    fetch(`/movie/${movieId}`)
        .then(response => {
            if (!response.ok) throw new Error("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return response.json();
        })
        .then(data => {
            document.getElementById("title").textContent = data.title;
            document.getElementById("year").textContent = "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: " + data.year;
            document.getElementById("description").textContent = data.description;
            document.getElementById("poster").src = data.posterUrl || "/static/images/no-image.png";

            let sum = 0;
            data.reviews.forEach(r => sum += r.rating);
            const meanRating = (data.reviews.length > 0)
                ? (sum / data.reviews.length).toFixed(2)
                : "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫";

            document.getElementById("meanRating").textContent = "‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: " + meanRating;

            const reviewsList = document.getElementById("reviewsList");
            data.reviews.forEach(review => {
                const div = document.createElement("div");
                div.className = "review";
                div.innerHTML = `
        
        <span>–û—Ü–µ–Ω–∫–∞ ${review.rating}</span>
        <span>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${review.text}</span>
        
    `;

                reviewsList.appendChild(div);
            });
        })
        .catch(error => {
            document.getElementById("title").textContent = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–∞ üò¢";
            console.error("–û—à–∏–±–∫–∞:", error);
        });
}



fetch('/fragments/header.html')
    .then(response => response.text())
    .then(html => {
        document.getElementById('header-placeholder').innerHTML = html;
    })
    .catch(error => {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å header:', error);
    });

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
const submitReviewBtn = document.getElementById('submitReviewBtn');
submitReviewBtn.addEventListener('click', () => {
    const rating = parseInt(document.getElementById('ratingInput').value);
    const comment = document.getElementById('commentInput').value.trim();

    if (isNaN(rating) || rating < 1 || rating > 10) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10");
        return;
    }
    const  uuid = sessionStorage.getItem("sessionId")
    fetch(`user/me/name?uuid=${uuid}`)
        .then(response => {
            if (!response.ok) {
                throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
            return response.text(); // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ –∏–º—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        })
        .then(username => {
            return fetch(`/review/create/${movieId}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    rating: rating,
                    username: username,
                    text: comment
                })
            });
        })
        .then(response => {
            if (response.ok) {
                alert("–û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω!");
                location.reload();
            } else {
                alert("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞");
            }
        })
        .catch(error => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞:", error);
            alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        });

});